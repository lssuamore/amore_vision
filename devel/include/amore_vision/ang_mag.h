// Generated by gencpp from file amore_vision/ang_mag.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_ANG_MAG_H
#define AMORE_VISION_MESSAGE_ANG_MAG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace amore_vision
{
template <class ContainerAllocator>
struct ang_mag_
{
  typedef ang_mag_<ContainerAllocator> Type;

  ang_mag_()
    : ang()
    , mag()  {
    }
  ang_mag_(const ContainerAllocator& _alloc)
    : ang(_alloc)
    , mag(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _ang_type;
  _ang_type ang;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mag_type;
  _mag_type mag;





  typedef boost::shared_ptr< ::amore_vision::ang_mag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::ang_mag_<ContainerAllocator> const> ConstPtr;

}; // struct ang_mag_

typedef ::amore_vision::ang_mag_<std::allocator<void> > ang_mag;

typedef boost::shared_ptr< ::amore_vision::ang_mag > ang_magPtr;
typedef boost::shared_ptr< ::amore_vision::ang_mag const> ang_magConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::ang_mag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::ang_mag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::ang_mag_<ContainerAllocator1> & lhs, const ::amore_vision::ang_mag_<ContainerAllocator2> & rhs)
{
  return lhs.ang == rhs.ang &&
    lhs.mag == rhs.mag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::ang_mag_<ContainerAllocator1> & lhs, const ::amore_vision::ang_mag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::ang_mag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::ang_mag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::ang_mag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::ang_mag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::ang_mag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::ang_mag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::ang_mag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2bc60f9ba55d7f3e348a4f6da89e008";
  }

  static const char* value(const ::amore_vision::ang_mag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2bc60f9ba55d7f3ULL;
  static const uint64_t static_value2 = 0xe348a4f6da89e008ULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::ang_mag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/ang_mag";
  }

  static const char* value(const ::amore_vision::ang_mag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::ang_mag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 ang\n"
"std_msgs/Float32 mag\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::amore_vision::ang_mag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::ang_mag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ang);
      stream.next(m.mag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ang_mag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::ang_mag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::ang_mag_<ContainerAllocator>& v)
  {
    s << indent << "ang: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.ang);
    s << indent << "mag: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_ANG_MAG_H

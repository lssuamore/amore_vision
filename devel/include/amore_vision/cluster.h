// Generated by gencpp from file amore_vision/cluster.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_CLUSTER_H
#define AMORE_VISION_MESSAGE_CLUSTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <amore_vision/depth_points.h>
#include <geometry_msgs/Point32.h>
#include <std_msgs/String.h>

namespace amore_vision
{
template <class ContainerAllocator>
struct cluster_
{
  typedef cluster_<ContainerAllocator> Type;

  cluster_()
    : raw_cluster()
    , num_points(0)
    , centroid()
    , label()
    , distance(0.0)  {
    }
  cluster_(const ContainerAllocator& _alloc)
    : raw_cluster(_alloc)
    , num_points(0)
    , centroid(_alloc)
    , label(_alloc)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::amore_vision::depth_points_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::amore_vision::depth_points_<ContainerAllocator> >> _raw_cluster_type;
  _raw_cluster_type raw_cluster;

   typedef int32_t _num_points_type;
  _num_points_type num_points;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;

   typedef  ::std_msgs::String_<ContainerAllocator>  _label_type;
  _label_type label;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::amore_vision::cluster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::cluster_<ContainerAllocator> const> ConstPtr;

}; // struct cluster_

typedef ::amore_vision::cluster_<std::allocator<void> > cluster;

typedef boost::shared_ptr< ::amore_vision::cluster > clusterPtr;
typedef boost::shared_ptr< ::amore_vision::cluster const> clusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::cluster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::cluster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::cluster_<ContainerAllocator1> & lhs, const ::amore_vision::cluster_<ContainerAllocator2> & rhs)
{
  return lhs.raw_cluster == rhs.raw_cluster &&
    lhs.num_points == rhs.num_points &&
    lhs.centroid == rhs.centroid &&
    lhs.label == rhs.label &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::cluster_<ContainerAllocator1> & lhs, const ::amore_vision::cluster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::cluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::cluster_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::cluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::cluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::cluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::cluster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa742a7a0d63a1e1274fe5ece59d103c";
  }

  static const char* value(const ::amore_vision::cluster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa742a7a0d63a1e1ULL;
  static const uint64_t static_value2 = 0x274fe5ece59d103cULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/cluster";
  }

  static const char* value(const ::amore_vision::cluster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "depth_points[] raw_cluster\n"
"int32 num_points\n"
"geometry_msgs/Point32 centroid\n"
"std_msgs/String label\n"
"float32 distance\n"
"================================================================================\n"
"MSG: amore_vision/depth_points\n"
"float32[4] labeled_point\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::amore_vision::cluster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::cluster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.raw_cluster);
      stream.next(m.num_points);
      stream.next(m.centroid);
      stream.next(m.label);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cluster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::cluster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::cluster_<ContainerAllocator>& v)
  {
    s << indent << "raw_cluster[]" << std::endl;
    for (size_t i = 0; i < v.raw_cluster.size(); ++i)
    {
      s << indent << "  raw_cluster[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amore_vision::depth_points_<ContainerAllocator> >::stream(s, indent + "    ", v.raw_cluster[i]);
    }
    s << indent << "num_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_points);
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
    s << indent << "label: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.label);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_CLUSTER_H

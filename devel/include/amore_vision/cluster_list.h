// Generated by gencpp from file amore_vision/cluster_list.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_CLUSTER_LIST_H
#define AMORE_VISION_MESSAGE_CLUSTER_LIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <amore_vision/cluster.h>

namespace amore_vision
{
template <class ContainerAllocator>
struct cluster_list_
{
  typedef cluster_list_<ContainerAllocator> Type;

  cluster_list_()
    : cluster_list()  {
    }
  cluster_list_(const ContainerAllocator& _alloc)
    : cluster_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::amore_vision::cluster_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::amore_vision::cluster_<ContainerAllocator> >> _cluster_list_type;
  _cluster_list_type cluster_list;





  typedef boost::shared_ptr< ::amore_vision::cluster_list_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::cluster_list_<ContainerAllocator> const> ConstPtr;

}; // struct cluster_list_

typedef ::amore_vision::cluster_list_<std::allocator<void> > cluster_list;

typedef boost::shared_ptr< ::amore_vision::cluster_list > cluster_listPtr;
typedef boost::shared_ptr< ::amore_vision::cluster_list const> cluster_listConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::cluster_list_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::cluster_list_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::cluster_list_<ContainerAllocator1> & lhs, const ::amore_vision::cluster_list_<ContainerAllocator2> & rhs)
{
  return lhs.cluster_list == rhs.cluster_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::cluster_list_<ContainerAllocator1> & lhs, const ::amore_vision::cluster_list_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::cluster_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::cluster_list_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::cluster_list_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::cluster_list_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::cluster_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::cluster_list_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::cluster_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c64c04dd922d096b96a3d3f178bc1aaa";
  }

  static const char* value(const ::amore_vision::cluster_list_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc64c04dd922d096bULL;
  static const uint64_t static_value2 = 0x96a3d3f178bc1aaaULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::cluster_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/cluster_list";
  }

  static const char* value(const ::amore_vision::cluster_list_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::cluster_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cluster[] cluster_list\n"
"================================================================================\n"
"MSG: amore_vision/cluster\n"
"depth_points[] raw_cluster\n"
"int32 num_points\n"
"geometry_msgs/Point32 centroid\n"
"std_msgs/String label\n"
"float32 distance\n"
"================================================================================\n"
"MSG: amore_vision/depth_points\n"
"float32[4] labeled_point\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::amore_vision::cluster_list_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::cluster_list_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cluster_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cluster_list_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::cluster_list_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::cluster_list_<ContainerAllocator>& v)
  {
    s << indent << "cluster_list[]" << std::endl;
    for (size_t i = 0; i < v.cluster_list.size(); ++i)
    {
      s << indent << "  cluster_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amore_vision::cluster_<ContainerAllocator> >::stream(s, indent + "    ", v.cluster_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_CLUSTER_LIST_H

// Generated by gencpp from file amore_vision/control_efforts.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_CONTROL_EFFORTS_H
#define AMORE_VISION_MESSAGE_CONTROL_EFFORTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace amore_vision
{
template <class ContainerAllocator>
struct control_efforts_
{
  typedef control_efforts_<ContainerAllocator> Type;

  control_efforts_()
    : t_x()
    , t_x_P()
    , t_x_I()
    , t_x_D()
    , t_y()
    , t_y_P()
    , t_y_I()
    , t_y_D()
    , m_z()
    , m_z_P()
    , m_z_I()
    , m_z_D()  {
    }
  control_efforts_(const ContainerAllocator& _alloc)
    : t_x(_alloc)
    , t_x_P(_alloc)
    , t_x_I(_alloc)
    , t_x_D(_alloc)
    , t_y(_alloc)
    , t_y_P(_alloc)
    , t_y_I(_alloc)
    , t_y_D(_alloc)
    , m_z(_alloc)
    , m_z_P(_alloc)
    , m_z_I(_alloc)
    , m_z_D(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_x_type;
  _t_x_type t_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_x_P_type;
  _t_x_P_type t_x_P;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_x_I_type;
  _t_x_I_type t_x_I;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_x_D_type;
  _t_x_D_type t_x_D;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_y_type;
  _t_y_type t_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_y_P_type;
  _t_y_P_type t_y_P;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_y_I_type;
  _t_y_I_type t_y_I;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _t_y_D_type;
  _t_y_D_type t_y_D;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _m_z_type;
  _m_z_type m_z;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _m_z_P_type;
  _m_z_P_type m_z_P;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _m_z_I_type;
  _m_z_I_type m_z_I;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _m_z_D_type;
  _m_z_D_type m_z_D;





  typedef boost::shared_ptr< ::amore_vision::control_efforts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::control_efforts_<ContainerAllocator> const> ConstPtr;

}; // struct control_efforts_

typedef ::amore_vision::control_efforts_<std::allocator<void> > control_efforts;

typedef boost::shared_ptr< ::amore_vision::control_efforts > control_effortsPtr;
typedef boost::shared_ptr< ::amore_vision::control_efforts const> control_effortsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::control_efforts_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::control_efforts_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::control_efforts_<ContainerAllocator1> & lhs, const ::amore_vision::control_efforts_<ContainerAllocator2> & rhs)
{
  return lhs.t_x == rhs.t_x &&
    lhs.t_x_P == rhs.t_x_P &&
    lhs.t_x_I == rhs.t_x_I &&
    lhs.t_x_D == rhs.t_x_D &&
    lhs.t_y == rhs.t_y &&
    lhs.t_y_P == rhs.t_y_P &&
    lhs.t_y_I == rhs.t_y_I &&
    lhs.t_y_D == rhs.t_y_D &&
    lhs.m_z == rhs.m_z &&
    lhs.m_z_P == rhs.m_z_P &&
    lhs.m_z_I == rhs.m_z_I &&
    lhs.m_z_D == rhs.m_z_D;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::control_efforts_<ContainerAllocator1> & lhs, const ::amore_vision::control_efforts_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::control_efforts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::control_efforts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::control_efforts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::control_efforts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::control_efforts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::control_efforts_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::control_efforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "925fe81e944ee95c22ed3341a39c98ea";
  }

  static const char* value(const ::amore_vision::control_efforts_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x925fe81e944ee95cULL;
  static const uint64_t static_value2 = 0x22ed3341a39c98eaULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::control_efforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/control_efforts";
  }

  static const char* value(const ::amore_vision::control_efforts_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::control_efforts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 t_x\n"
"	std_msgs/Float32 t_x_P\n"
"	std_msgs/Float32 t_x_I\n"
"	std_msgs/Float32 t_x_D\n"
"std_msgs/Float32 t_y\n"
"	std_msgs/Float32 t_y_P\n"
"	std_msgs/Float32 t_y_I\n"
"	std_msgs/Float32 t_y_D\n"
"std_msgs/Float32 m_z\n"
"	std_msgs/Float32 m_z_P\n"
"	std_msgs/Float32 m_z_I\n"
"	std_msgs/Float32 m_z_D\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::amore_vision::control_efforts_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::control_efforts_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t_x);
      stream.next(m.t_x_P);
      stream.next(m.t_x_I);
      stream.next(m.t_x_D);
      stream.next(m.t_y);
      stream.next(m.t_y_P);
      stream.next(m.t_y_I);
      stream.next(m.t_y_D);
      stream.next(m.m_z);
      stream.next(m.m_z_P);
      stream.next(m.m_z_I);
      stream.next(m.m_z_D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_efforts_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::control_efforts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::control_efforts_<ContainerAllocator>& v)
  {
    s << indent << "t_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_x);
    s << indent << "t_x_P: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_x_P);
    s << indent << "t_x_I: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_x_I);
    s << indent << "t_x_D: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_x_D);
    s << indent << "t_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_y);
    s << indent << "t_y_P: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_y_P);
    s << indent << "t_y_I: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_y_I);
    s << indent << "t_y_D: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.t_y_D);
    s << indent << "m_z: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.m_z);
    s << indent << "m_z_P: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.m_z_P);
    s << indent << "m_z_I: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.m_z_I);
    s << indent << "m_z_D: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.m_z_D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_CONTROL_EFFORTS_H

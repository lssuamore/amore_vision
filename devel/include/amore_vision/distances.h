// Generated by gencpp from file amore_vision/distances.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_DISTANCES_H
#define AMORE_VISION_MESSAGE_DISTANCES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace amore_vision
{
template <class ContainerAllocator>
struct distances_
{
  typedef distances_<ContainerAllocator> Type;

  distances_()
    : distances()  {
    }
  distances_(const ContainerAllocator& _alloc)
    : distances(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _distances_type;
  _distances_type distances;





  typedef boost::shared_ptr< ::amore_vision::distances_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::distances_<ContainerAllocator> const> ConstPtr;

}; // struct distances_

typedef ::amore_vision::distances_<std::allocator<void> > distances;

typedef boost::shared_ptr< ::amore_vision::distances > distancesPtr;
typedef boost::shared_ptr< ::amore_vision::distances const> distancesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::distances_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::distances_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::distances_<ContainerAllocator1> & lhs, const ::amore_vision::distances_<ContainerAllocator2> & rhs)
{
  return lhs.distances == rhs.distances;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::distances_<ContainerAllocator1> & lhs, const ::amore_vision::distances_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::distances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::distances_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::distances_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::distances_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::distances_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::distances_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f68b787273c43ae659a92281e8955cfb";
  }

  static const char* value(const ::amore_vision::distances_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf68b787273c43ae6ULL;
  static const uint64_t static_value2 = 0x59a92281e8955cfbULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/distances";
  }

  static const char* value(const ::amore_vision::distances_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::distances_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] distances\n"
;
  }

  static const char* value(const ::amore_vision::distances_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::distances_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distances);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distances_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::distances_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::distances_<ContainerAllocator>& v)
  {
    s << indent << "distances[]" << std::endl;
    for (size_t i = 0; i < v.distances.size(); ++i)
    {
      s << indent << "  distances[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distances[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_DISTANCES_H

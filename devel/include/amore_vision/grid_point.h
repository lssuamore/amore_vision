// Generated by gencpp from file amore_vision/grid_point.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_GRID_POINT_H
#define AMORE_VISION_MESSAGE_GRID_POINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace amore_vision
{
template <class ContainerAllocator>
struct grid_point_
{
  typedef grid_point_<ContainerAllocator> Type;

  grid_point_()
    : x(0.0)
    , y(0.0)
    , status(0)
    , percent(0)
    , min_x(0)
    , min_y(0)
    , max_x(0)
    , max_y(0)
    , grid_size(0.0)  {
    }
  grid_point_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , status(0)
    , percent(0)
    , min_x(0)
    , min_y(0)
    , max_x(0)
    , max_y(0)
    , grid_size(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef int8_t _status_type;
  _status_type status;

   typedef int8_t _percent_type;
  _percent_type percent;

   typedef int8_t _min_x_type;
  _min_x_type min_x;

   typedef int8_t _min_y_type;
  _min_y_type min_y;

   typedef int8_t _max_x_type;
  _max_x_type max_x;

   typedef int8_t _max_y_type;
  _max_y_type max_y;

   typedef float _grid_size_type;
  _grid_size_type grid_size;





  typedef boost::shared_ptr< ::amore_vision::grid_point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::grid_point_<ContainerAllocator> const> ConstPtr;

}; // struct grid_point_

typedef ::amore_vision::grid_point_<std::allocator<void> > grid_point;

typedef boost::shared_ptr< ::amore_vision::grid_point > grid_pointPtr;
typedef boost::shared_ptr< ::amore_vision::grid_point const> grid_pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::grid_point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::grid_point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::grid_point_<ContainerAllocator1> & lhs, const ::amore_vision::grid_point_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.status == rhs.status &&
    lhs.percent == rhs.percent &&
    lhs.min_x == rhs.min_x &&
    lhs.min_y == rhs.min_y &&
    lhs.max_x == rhs.max_x &&
    lhs.max_y == rhs.max_y &&
    lhs.grid_size == rhs.grid_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::grid_point_<ContainerAllocator1> & lhs, const ::amore_vision::grid_point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::grid_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::grid_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::grid_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::grid_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::grid_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::grid_point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::grid_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "435092f9725ac07bcd4486688f70bed6";
  }

  static const char* value(const ::amore_vision::grid_point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x435092f9725ac07bULL;
  static const uint64_t static_value2 = 0xcd4486688f70bed6ULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::grid_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/grid_point";
  }

  static const char* value(const ::amore_vision::grid_point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::grid_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x \n"
"float32 y\n"
"int8 status\n"
"int8 percent\n"
"int8 min_x \n"
"int8 min_y\n"
"int8 max_x \n"
"int8 max_y\n"
"float32 grid_size\n"
;
  }

  static const char* value(const ::amore_vision::grid_point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::grid_point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.status);
      stream.next(m.percent);
      stream.next(m.min_x);
      stream.next(m.min_y);
      stream.next(m.max_x);
      stream.next(m.max_y);
      stream.next(m.grid_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grid_point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::grid_point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::grid_point_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "percent: ";
    Printer<int8_t>::stream(s, indent + "  ", v.percent);
    s << indent << "min_x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.min_x);
    s << indent << "min_y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.min_y);
    s << indent << "max_x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.max_x);
    s << indent << "max_y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.max_y);
    s << indent << "grid_size: ";
    Printer<float>::stream(s, indent + "  ", v.grid_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_GRID_POINT_H

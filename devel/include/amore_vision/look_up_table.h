// Generated by gencpp from file amore_vision/look_up_table.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_LOOK_UP_TABLE_H
#define AMORE_VISION_MESSAGE_LOOK_UP_TABLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <amore_vision/buoy.h>

namespace amore_vision
{
template <class ContainerAllocator>
struct look_up_table_
{
  typedef look_up_table_<ContainerAllocator> Type;

  look_up_table_()
    : labeled_buoy_list()  {
    }
  look_up_table_(const ContainerAllocator& _alloc)
    : labeled_buoy_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::amore_vision::buoy_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::amore_vision::buoy_<ContainerAllocator> >> _labeled_buoy_list_type;
  _labeled_buoy_list_type labeled_buoy_list;





  typedef boost::shared_ptr< ::amore_vision::look_up_table_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::look_up_table_<ContainerAllocator> const> ConstPtr;

}; // struct look_up_table_

typedef ::amore_vision::look_up_table_<std::allocator<void> > look_up_table;

typedef boost::shared_ptr< ::amore_vision::look_up_table > look_up_tablePtr;
typedef boost::shared_ptr< ::amore_vision::look_up_table const> look_up_tableConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::look_up_table_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::look_up_table_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::look_up_table_<ContainerAllocator1> & lhs, const ::amore_vision::look_up_table_<ContainerAllocator2> & rhs)
{
  return lhs.labeled_buoy_list == rhs.labeled_buoy_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::look_up_table_<ContainerAllocator1> & lhs, const ::amore_vision::look_up_table_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::look_up_table_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::look_up_table_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::look_up_table_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::look_up_table_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::look_up_table_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::look_up_table_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::look_up_table_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a566061cda1f744e70300cded2a4c97";
  }

  static const char* value(const ::amore_vision::look_up_table_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a566061cda1f744ULL;
  static const uint64_t static_value2 = 0xe70300cded2a4c97ULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::look_up_table_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/look_up_table";
  }

  static const char* value(const ::amore_vision::look_up_table_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::look_up_table_<ContainerAllocator> >
{
  static const char* value()
  {
    return "buoy[] labeled_buoy_list\n"
"================================================================================\n"
"MSG: amore_vision/buoy\n"
"geometry_msgs/Point32 centroid\n"
"string color\n"
"string label\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::amore_vision::look_up_table_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::look_up_table_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.labeled_buoy_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct look_up_table_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::look_up_table_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::look_up_table_<ContainerAllocator>& v)
  {
    s << indent << "labeled_buoy_list[]" << std::endl;
    for (size_t i = 0; i < v.labeled_buoy_list.size(); ++i)
    {
      s << indent << "  labeled_buoy_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::amore_vision::buoy_<ContainerAllocator> >::stream(s, indent + "    ", v.labeled_buoy_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_LOOK_UP_TABLE_H

// Generated by gencpp from file amore_vision/propulsion_system.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_PROPULSION_SYSTEM_H
#define AMORE_VISION_MESSAGE_PROPULSION_SYSTEM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Float64.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace amore_vision
{
template <class ContainerAllocator>
struct propulsion_system_
{
  typedef propulsion_system_<ContainerAllocator> Type;

  propulsion_system_()
    : header()
    , goal_position()
    , goal_psi()
    , usv_position()
    , usv_psi()
    , usv_latitude()
    , usv_longitude()
    , e_xy_allowed()
    , e_psi_allowed()  {
    }
  propulsion_system_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_position(_alloc)
    , goal_psi(_alloc)
    , usv_position(_alloc)
    , usv_psi(_alloc)
    , usv_latitude(_alloc)
    , usv_longitude(_alloc)
    , e_xy_allowed(_alloc)
    , e_psi_allowed(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _goal_position_type;
  _goal_position_type goal_position;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _goal_psi_type;
  _goal_psi_type goal_psi;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _usv_position_type;
  _usv_position_type usv_position;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _usv_psi_type;
  _usv_psi_type usv_psi;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _usv_latitude_type;
  _usv_latitude_type usv_latitude;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _usv_longitude_type;
  _usv_longitude_type usv_longitude;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _e_xy_allowed_type;
  _e_xy_allowed_type e_xy_allowed;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _e_psi_allowed_type;
  _e_psi_allowed_type e_psi_allowed;





  typedef boost::shared_ptr< ::amore_vision::propulsion_system_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::propulsion_system_<ContainerAllocator> const> ConstPtr;

}; // struct propulsion_system_

typedef ::amore_vision::propulsion_system_<std::allocator<void> > propulsion_system;

typedef boost::shared_ptr< ::amore_vision::propulsion_system > propulsion_systemPtr;
typedef boost::shared_ptr< ::amore_vision::propulsion_system const> propulsion_systemConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::propulsion_system_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::propulsion_system_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::propulsion_system_<ContainerAllocator1> & lhs, const ::amore_vision::propulsion_system_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_position == rhs.goal_position &&
    lhs.goal_psi == rhs.goal_psi &&
    lhs.usv_position == rhs.usv_position &&
    lhs.usv_psi == rhs.usv_psi &&
    lhs.usv_latitude == rhs.usv_latitude &&
    lhs.usv_longitude == rhs.usv_longitude &&
    lhs.e_xy_allowed == rhs.e_xy_allowed &&
    lhs.e_psi_allowed == rhs.e_psi_allowed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::propulsion_system_<ContainerAllocator1> & lhs, const ::amore_vision::propulsion_system_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::propulsion_system_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::propulsion_system_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::propulsion_system_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::propulsion_system_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::propulsion_system_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::propulsion_system_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::propulsion_system_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71d621936073a6985aace9a419610593";
  }

  static const char* value(const ::amore_vision::propulsion_system_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71d621936073a698ULL;
  static const uint64_t static_value2 = 0x5aace9a419610593ULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::propulsion_system_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/propulsion_system";
  }

  static const char* value(const ::amore_vision::propulsion_system_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::propulsion_system_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"geometry_msgs/Point goal_position\n"
"std_msgs/Float64 goal_psi\n"
"geometry_msgs/Point usv_position\n"
"std_msgs/Float64 usv_psi\n"
"std_msgs/Float64 usv_latitude\n"
"std_msgs/Float64 usv_longitude\n"
"std_msgs/Float64 e_xy_allowed\n"
"std_msgs/Float64 e_psi_allowed\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::amore_vision::propulsion_system_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::propulsion_system_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_position);
      stream.next(m.goal_psi);
      stream.next(m.usv_position);
      stream.next(m.usv_psi);
      stream.next(m.usv_latitude);
      stream.next(m.usv_longitude);
      stream.next(m.e_xy_allowed);
      stream.next(m.e_psi_allowed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct propulsion_system_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::propulsion_system_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::propulsion_system_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_position);
    s << indent << "goal_psi: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_psi);
    s << indent << "usv_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.usv_position);
    s << indent << "usv_psi: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.usv_psi);
    s << indent << "usv_latitude: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.usv_latitude);
    s << indent << "usv_longitude: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.usv_longitude);
    s << indent << "e_xy_allowed: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.e_xy_allowed);
    s << indent << "e_psi_allowed: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.e_psi_allowed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_PROPULSION_SYSTEM_H

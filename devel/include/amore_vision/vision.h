// Generated by gencpp from file amore_vision/vision.msg
// DO NOT EDIT!


#ifndef AMORE_VISION_MESSAGE_VISION_H
#define AMORE_VISION_MESSAGE_VISION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace amore_vision
{
template <class ContainerAllocator>
struct vision_
{
  typedef vision_<ContainerAllocator> Type;

  vision_()
    : object_avoid()
    , x_avoid()
    , y_avoid()
    , quantity_avoid(0)
    , object_classify()
    , x_classify()
    , y_classify()
    , quantity_classify(0)  {
    }
  vision_(const ContainerAllocator& _alloc)
    : object_avoid(_alloc)
    , x_avoid(_alloc)
    , y_avoid(_alloc)
    , quantity_avoid(0)
    , object_classify(_alloc)
    , x_classify(_alloc)
    , y_classify(_alloc)
    , quantity_classify(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_avoid_type;
  _object_avoid_type object_avoid;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_avoid_type;
  _x_avoid_type x_avoid;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_avoid_type;
  _y_avoid_type y_avoid;

   typedef int32_t _quantity_avoid_type;
  _quantity_avoid_type quantity_avoid;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _object_classify_type;
  _object_classify_type object_classify;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_classify_type;
  _x_classify_type x_classify;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_classify_type;
  _y_classify_type y_classify;

   typedef int32_t _quantity_classify_type;
  _quantity_classify_type quantity_classify;





  typedef boost::shared_ptr< ::amore_vision::vision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore_vision::vision_<ContainerAllocator> const> ConstPtr;

}; // struct vision_

typedef ::amore_vision::vision_<std::allocator<void> > vision;

typedef boost::shared_ptr< ::amore_vision::vision > visionPtr;
typedef boost::shared_ptr< ::amore_vision::vision const> visionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore_vision::vision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore_vision::vision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore_vision::vision_<ContainerAllocator1> & lhs, const ::amore_vision::vision_<ContainerAllocator2> & rhs)
{
  return lhs.object_avoid == rhs.object_avoid &&
    lhs.x_avoid == rhs.x_avoid &&
    lhs.y_avoid == rhs.y_avoid &&
    lhs.quantity_avoid == rhs.quantity_avoid &&
    lhs.object_classify == rhs.object_classify &&
    lhs.x_classify == rhs.x_classify &&
    lhs.y_classify == rhs.y_classify &&
    lhs.quantity_classify == rhs.quantity_classify;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore_vision::vision_<ContainerAllocator1> & lhs, const ::amore_vision::vision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::vision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore_vision::vision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore_vision::vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::vision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore_vision::vision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore_vision::vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a1cd59d7d13b9f729c9d5dfe01965f7";
  }

  static const char* value(const ::amore_vision::vision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a1cd59d7d13b9f7ULL;
  static const uint64_t static_value2 = 0x29c9d5dfe01965f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::amore_vision::vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore_vision/vision";
  }

  static const char* value(const ::amore_vision::vision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore_vision::vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_avoid\n"
"float32[] x_avoid\n"
"float32[] y_avoid\n"
"int32 quantity_avoid\n"
"string[] object_classify\n"
"float32[] x_classify\n"
"float32[] y_classify\n"
"int32 quantity_classify\n"
;
  }

  static const char* value(const ::amore_vision::vision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore_vision::vision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_avoid);
      stream.next(m.x_avoid);
      stream.next(m.y_avoid);
      stream.next(m.quantity_avoid);
      stream.next(m.object_classify);
      stream.next(m.x_classify);
      stream.next(m.y_classify);
      stream.next(m.quantity_classify);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore_vision::vision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore_vision::vision_<ContainerAllocator>& v)
  {
    s << indent << "object_avoid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_avoid);
    s << indent << "x_avoid[]" << std::endl;
    for (size_t i = 0; i < v.x_avoid.size(); ++i)
    {
      s << indent << "  x_avoid[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_avoid[i]);
    }
    s << indent << "y_avoid[]" << std::endl;
    for (size_t i = 0; i < v.y_avoid.size(); ++i)
    {
      s << indent << "  y_avoid[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_avoid[i]);
    }
    s << indent << "quantity_avoid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quantity_avoid);
    s << indent << "object_classify[]" << std::endl;
    for (size_t i = 0; i < v.object_classify.size(); ++i)
    {
      s << indent << "  object_classify[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_classify[i]);
    }
    s << indent << "x_classify[]" << std::endl;
    for (size_t i = 0; i < v.x_classify.size(); ++i)
    {
      s << indent << "  x_classify[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_classify[i]);
    }
    s << indent << "y_classify[]" << std::endl;
    for (size_t i = 0; i < v.y_classify.size(); ++i)
    {
      s << indent << "  y_classify[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_classify[i]);
    }
    s << indent << "quantity_classify: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quantity_classify);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_VISION_MESSAGE_VISION_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amore_vision/cluster.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import amore_vision.msg
import geometry_msgs.msg
import std_msgs.msg

class cluster(genpy.Message):
  _md5sum = "fa742a7a0d63a1e1274fe5ece59d103c"
  _type = "amore_vision/cluster"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """depth_points[] raw_cluster
int32 num_points
geometry_msgs/Point32 centroid
std_msgs/String label
float32 distance
================================================================================
MSG: amore_vision/depth_points
float32[4] labeled_point
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['raw_cluster','num_points','centroid','label','distance']
  _slot_types = ['amore_vision/depth_points[]','int32','geometry_msgs/Point32','std_msgs/String','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       raw_cluster,num_points,centroid,label,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cluster, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.raw_cluster is None:
        self.raw_cluster = []
      if self.num_points is None:
        self.num_points = 0
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point32()
      if self.label is None:
        self.label = std_msgs.msg.String()
      if self.distance is None:
        self.distance = 0.
    else:
      self.raw_cluster = []
      self.num_points = 0
      self.centroid = geometry_msgs.msg.Point32()
      self.label = std_msgs.msg.String()
      self.distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.raw_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.raw_cluster:
        buff.write(_get_struct_4f().pack(*val1.labeled_point))
      _x = self
      buff.write(_get_struct_i3f().pack(_x.num_points, _x.centroid.x, _x.centroid.y, _x.centroid.z))
      _x = self.label.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.distance
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.raw_cluster is None:
        self.raw_cluster = None
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point32()
      if self.label is None:
        self.label = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.raw_cluster = []
      for i in range(0, length):
        val1 = amore_vision.msg.depth_points()
        start = end
        end += 16
        val1.labeled_point = _get_struct_4f().unpack(str[start:end])
        self.raw_cluster.append(val1)
      _x = self
      start = end
      end += 16
      (_x.num_points, _x.centroid.x, _x.centroid.y, _x.centroid.z,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label.data = str[start:end]
      start = end
      end += 4
      (self.distance,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.raw_cluster)
      buff.write(_struct_I.pack(length))
      for val1 in self.raw_cluster:
        buff.write(val1.labeled_point.tostring())
      _x = self
      buff.write(_get_struct_i3f().pack(_x.num_points, _x.centroid.x, _x.centroid.y, _x.centroid.z))
      _x = self.label.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.distance
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.raw_cluster is None:
        self.raw_cluster = None
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point32()
      if self.label is None:
        self.label = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.raw_cluster = []
      for i in range(0, length):
        val1 = amore_vision.msg.depth_points()
        start = end
        end += 16
        val1.labeled_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
        self.raw_cluster.append(val1)
      _x = self
      start = end
      end += 16
      (_x.num_points, _x.centroid.x, _x.centroid.y, _x.centroid.z,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label.data = str[start:end]
      start = end
      end += 4
      (self.distance,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i3f = None
def _get_struct_i3f():
    global _struct_i3f
    if _struct_i3f is None:
        _struct_i3f = struct.Struct("<i3f")
    return _struct_i3f

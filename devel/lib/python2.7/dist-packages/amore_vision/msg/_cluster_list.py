# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amore_vision/cluster_list.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import amore_vision.msg
import geometry_msgs.msg
import std_msgs.msg

class cluster_list(genpy.Message):
  _md5sum = "c64c04dd922d096b96a3d3f178bc1aaa"
  _type = "amore_vision/cluster_list"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cluster[] cluster_list
================================================================================
MSG: amore_vision/cluster
depth_points[] raw_cluster
int32 num_points
geometry_msgs/Point32 centroid
std_msgs/String label
float32 distance
================================================================================
MSG: amore_vision/depth_points
float32[4] labeled_point
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['cluster_list']
  _slot_types = ['amore_vision/cluster[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cluster_list, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cluster_list is None:
        self.cluster_list = []
    else:
      self.cluster_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.cluster_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.cluster_list:
        length = len(val1.raw_cluster)
        buff.write(_struct_I.pack(length))
        for val2 in val1.raw_cluster:
          buff.write(_get_struct_4f().pack(*val2.labeled_point))
        _x = val1.num_points
        buff.write(_get_struct_i().pack(_x))
        _v1 = val1.centroid
        _x = _v1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v2 = val1.label
        _x = _v2.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.distance
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_list is None:
        self.cluster_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cluster_list = []
      for i in range(0, length):
        val1 = amore_vision.msg.cluster()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.raw_cluster = []
        for i in range(0, length):
          val2 = amore_vision.msg.depth_points()
          start = end
          end += 16
          val2.labeled_point = _get_struct_4f().unpack(str[start:end])
          val1.raw_cluster.append(val2)
        start = end
        end += 4
        (val1.num_points,) = _get_struct_i().unpack(str[start:end])
        _v3 = val1.centroid
        _x = _v3
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v4 = val1.label
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.data = str[start:end]
        start = end
        end += 4
        (val1.distance,) = _get_struct_f().unpack(str[start:end])
        self.cluster_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.cluster_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.cluster_list:
        length = len(val1.raw_cluster)
        buff.write(_struct_I.pack(length))
        for val2 in val1.raw_cluster:
          buff.write(val2.labeled_point.tostring())
        _x = val1.num_points
        buff.write(_get_struct_i().pack(_x))
        _v5 = val1.centroid
        _x = _v5
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v6 = val1.label
        _x = _v6.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.distance
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cluster_list is None:
        self.cluster_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cluster_list = []
      for i in range(0, length):
        val1 = amore_vision.msg.cluster()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.raw_cluster = []
        for i in range(0, length):
          val2 = amore_vision.msg.depth_points()
          start = end
          end += 16
          val2.labeled_point = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
          val1.raw_cluster.append(val2)
        start = end
        end += 4
        (val1.num_points,) = _get_struct_i().unpack(str[start:end])
        _v7 = val1.centroid
        _x = _v7
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        _v8 = val1.label
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.data = str[start:end]
        start = end
        end += 4
        (val1.distance,) = _get_struct_f().unpack(str[start:end])
        self.cluster_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

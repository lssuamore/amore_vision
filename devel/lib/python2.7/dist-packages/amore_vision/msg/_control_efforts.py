# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amore_vision/control_efforts.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class control_efforts(genpy.Message):
  _md5sum = "925fe81e944ee95c22ed3341a39c98ea"
  _type = "amore_vision/control_efforts"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 t_x
	std_msgs/Float32 t_x_P
	std_msgs/Float32 t_x_I
	std_msgs/Float32 t_x_D
std_msgs/Float32 t_y
	std_msgs/Float32 t_y_P
	std_msgs/Float32 t_y_I
	std_msgs/Float32 t_y_D
std_msgs/Float32 m_z
	std_msgs/Float32 m_z_P
	std_msgs/Float32 m_z_I
	std_msgs/Float32 m_z_D

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['t_x','t_x_P','t_x_I','t_x_D','t_y','t_y_P','t_y_I','t_y_D','m_z','m_z_P','m_z_I','m_z_D']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t_x,t_x_P,t_x_I,t_x_D,t_y,t_y_P,t_y_I,t_y_D,m_z,m_z_P,m_z_I,m_z_D

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_efforts, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.t_x is None:
        self.t_x = std_msgs.msg.Float32()
      if self.t_x_P is None:
        self.t_x_P = std_msgs.msg.Float32()
      if self.t_x_I is None:
        self.t_x_I = std_msgs.msg.Float32()
      if self.t_x_D is None:
        self.t_x_D = std_msgs.msg.Float32()
      if self.t_y is None:
        self.t_y = std_msgs.msg.Float32()
      if self.t_y_P is None:
        self.t_y_P = std_msgs.msg.Float32()
      if self.t_y_I is None:
        self.t_y_I = std_msgs.msg.Float32()
      if self.t_y_D is None:
        self.t_y_D = std_msgs.msg.Float32()
      if self.m_z is None:
        self.m_z = std_msgs.msg.Float32()
      if self.m_z_P is None:
        self.m_z_P = std_msgs.msg.Float32()
      if self.m_z_I is None:
        self.m_z_I = std_msgs.msg.Float32()
      if self.m_z_D is None:
        self.m_z_D = std_msgs.msg.Float32()
    else:
      self.t_x = std_msgs.msg.Float32()
      self.t_x_P = std_msgs.msg.Float32()
      self.t_x_I = std_msgs.msg.Float32()
      self.t_x_D = std_msgs.msg.Float32()
      self.t_y = std_msgs.msg.Float32()
      self.t_y_P = std_msgs.msg.Float32()
      self.t_y_I = std_msgs.msg.Float32()
      self.t_y_D = std_msgs.msg.Float32()
      self.m_z = std_msgs.msg.Float32()
      self.m_z_P = std_msgs.msg.Float32()
      self.m_z_I = std_msgs.msg.Float32()
      self.m_z_D = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.t_x.data, _x.t_x_P.data, _x.t_x_I.data, _x.t_x_D.data, _x.t_y.data, _x.t_y_P.data, _x.t_y_I.data, _x.t_y_D.data, _x.m_z.data, _x.m_z_P.data, _x.m_z_I.data, _x.m_z_D.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.t_x is None:
        self.t_x = std_msgs.msg.Float32()
      if self.t_x_P is None:
        self.t_x_P = std_msgs.msg.Float32()
      if self.t_x_I is None:
        self.t_x_I = std_msgs.msg.Float32()
      if self.t_x_D is None:
        self.t_x_D = std_msgs.msg.Float32()
      if self.t_y is None:
        self.t_y = std_msgs.msg.Float32()
      if self.t_y_P is None:
        self.t_y_P = std_msgs.msg.Float32()
      if self.t_y_I is None:
        self.t_y_I = std_msgs.msg.Float32()
      if self.t_y_D is None:
        self.t_y_D = std_msgs.msg.Float32()
      if self.m_z is None:
        self.m_z = std_msgs.msg.Float32()
      if self.m_z_P is None:
        self.m_z_P = std_msgs.msg.Float32()
      if self.m_z_I is None:
        self.m_z_I = std_msgs.msg.Float32()
      if self.m_z_D is None:
        self.m_z_D = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.t_x.data, _x.t_x_P.data, _x.t_x_I.data, _x.t_x_D.data, _x.t_y.data, _x.t_y_P.data, _x.t_y_I.data, _x.t_y_D.data, _x.m_z.data, _x.m_z_P.data, _x.m_z_I.data, _x.m_z_D.data,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.t_x.data, _x.t_x_P.data, _x.t_x_I.data, _x.t_x_D.data, _x.t_y.data, _x.t_y_P.data, _x.t_y_I.data, _x.t_y_D.data, _x.m_z.data, _x.m_z_P.data, _x.m_z_I.data, _x.m_z_D.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.t_x is None:
        self.t_x = std_msgs.msg.Float32()
      if self.t_x_P is None:
        self.t_x_P = std_msgs.msg.Float32()
      if self.t_x_I is None:
        self.t_x_I = std_msgs.msg.Float32()
      if self.t_x_D is None:
        self.t_x_D = std_msgs.msg.Float32()
      if self.t_y is None:
        self.t_y = std_msgs.msg.Float32()
      if self.t_y_P is None:
        self.t_y_P = std_msgs.msg.Float32()
      if self.t_y_I is None:
        self.t_y_I = std_msgs.msg.Float32()
      if self.t_y_D is None:
        self.t_y_D = std_msgs.msg.Float32()
      if self.m_z is None:
        self.m_z = std_msgs.msg.Float32()
      if self.m_z_P is None:
        self.m_z_P = std_msgs.msg.Float32()
      if self.m_z_I is None:
        self.m_z_I = std_msgs.msg.Float32()
      if self.m_z_D is None:
        self.m_z_D = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.t_x.data, _x.t_x_P.data, _x.t_x_I.data, _x.t_x_D.data, _x.t_y.data, _x.t_y_P.data, _x.t_y_I.data, _x.t_y_D.data, _x.m_z.data, _x.m_z_P.data, _x.m_z_I.data, _x.m_z_D.data,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f

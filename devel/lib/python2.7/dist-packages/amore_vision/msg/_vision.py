# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from amore_vision/vision.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class vision(genpy.Message):
  _md5sum = "9a1cd59d7d13b9f729c9d5dfe01965f7"
  _type = "amore_vision/vision"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string object_avoid
float32[] x_avoid
float32[] y_avoid
int32 quantity_avoid
string[] object_classify
float32[] x_classify
float32[] y_classify
int32 quantity_classify
"""
  __slots__ = ['object_avoid','x_avoid','y_avoid','quantity_avoid','object_classify','x_classify','y_classify','quantity_classify']
  _slot_types = ['string','float32[]','float32[]','int32','string[]','float32[]','float32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_avoid,x_avoid,y_avoid,quantity_avoid,object_classify,x_classify,y_classify,quantity_classify

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vision, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object_avoid is None:
        self.object_avoid = ''
      if self.x_avoid is None:
        self.x_avoid = []
      if self.y_avoid is None:
        self.y_avoid = []
      if self.quantity_avoid is None:
        self.quantity_avoid = 0
      if self.object_classify is None:
        self.object_classify = []
      if self.x_classify is None:
        self.x_classify = []
      if self.y_classify is None:
        self.y_classify = []
      if self.quantity_classify is None:
        self.quantity_classify = 0
    else:
      self.object_avoid = ''
      self.x_avoid = []
      self.y_avoid = []
      self.quantity_avoid = 0
      self.object_classify = []
      self.x_classify = []
      self.y_classify = []
      self.quantity_classify = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_avoid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.x_avoid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.x_avoid))
      length = len(self.y_avoid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.y_avoid))
      _x = self.quantity_avoid
      buff.write(_get_struct_i().pack(_x))
      length = len(self.object_classify)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_classify:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.x_classify)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.x_classify))
      length = len(self.y_classify)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.y_classify))
      _x = self.quantity_classify
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_avoid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_avoid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_avoid = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_avoid = s.unpack(str[start:end])
      start = end
      end += 4
      (self.quantity_avoid,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_classify = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.object_classify.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_classify = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_classify = s.unpack(str[start:end])
      start = end
      end += 4
      (self.quantity_classify,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_avoid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.x_avoid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.x_avoid.tostring())
      length = len(self.y_avoid)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.y_avoid.tostring())
      _x = self.quantity_avoid
      buff.write(_get_struct_i().pack(_x))
      length = len(self.object_classify)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_classify:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.x_classify)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.x_classify.tostring())
      length = len(self.y_classify)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.y_classify.tostring())
      _x = self.quantity_classify
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_avoid = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_avoid = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_avoid = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_avoid = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.quantity_avoid,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_classify = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.object_classify.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.x_classify = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.y_classify = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.quantity_classify,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
